<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Dashboard</title>
    <style>
        body {
            display: flex;
            flex-direction: column;
            min-height: 100vh;
            margin: 0;
        }

        .container {
            flex: 1;
        }


        nav {
            background-color: #333;
            padding: 15px;
            text-align: center;
        }

        nav a {
            color: white;
            text-decoration: none;
            font-size: 18px;
            margin: 0 20px;
            font-weight: bold;
        }

        nav a:hover {
            color: #f0ad4e;
        }

        h1 {
            color: #c3c3c3;
            text-align: center;
            margin: 40px 0;
        }

        h2 {
            margin-left: 43%;
            margin-top: 2%;
        }

        table {
            width: 80%;
            margin: 20px auto;
            border-collapse: collapse;
            background-color: #fff;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
            border-radius: 8px;
        }

        th,
        td {
            padding: 15px;
            text-align: center;
            border-bottom: 1px solid #ddd;
        }

        th {
            background-color: #4CAF50;
            color: white;
            font-size: 16px;
        }

        td button {
            padding: 10px 20px;
            margin: 5px;
            border: none;
            border-radius: 5px;
            font-size: 14px;
            cursor: pointer;
            transition: background-color 0.3s, transform 0.2s;
        }

        td button:first-child {
            background-color: #5bc0de;
            color: white;
        }

        td button:first-child:hover {
            background-color: #31b0d5;
            transform: scale(1.05);
        }


        td button.ban {
            background-color: #f0ad4e;

            color: white;
        }

        td button.ban:hover {
            background-color: #ec971f;

            transform: scale(1.05);
        }


        td button.delete {
            background-color: #d9534f;

            color: white;
        }

        td button.delete:hover {
            background-color: #c9302c;

            transform: scale(1.05);
        }


        td button:hover {
            opacity: 0.9;
        }


        header {
            background: #333;
            color: #fff;
            padding: 20px;
            text-align: center;
        }

        tr:hover {
            background-color: #f1f1f1;
        }

        tbody tr:nth-child(odd) {
            background-color: #f9f9f9;
        }

        .participant {
            padding: 6px 0;
            font-size: 14px;
            color: #555;
            border-bottom: 1px solid #eee;
        }

        p {
            font-size: 18px;
            color: #555;
            text-align: center;
        }

        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.6);
        }

        .modal-content {
            background-color: #fefefe;
            margin: 10% auto;
            padding: 20px;
            border-radius: 8px;
            width: 40%;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
            position: relative;
        }

        .close {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
        }

        .close:hover,
        .close:focus {
            color: black;
            text-decoration: none;
            cursor: pointer;
        }

        /* Form Elements Alignment */
        .modal-content div {
            margin-bottom: 15px;
        }

        .modal-content label {
            display: block;
            font-weight: bold;
        }

        .modal-content input,
        .modal-content select,
        .modal-content button {
            width: 100%;
            padding: 10px;
            margin-top: 5px;
            box-sizing: border-box;
        }

        footer {
            background-color: #333;
            color: white;
            padding: 20px;
            text-align: center;
            width: 100%;
            height: 20px;
            position: relative;
        }
    </style>
</head>

<body>
    <%- include('partials/header') %>


        <div class="container">
            <h2>Users List</h2>
            <table border="1">
                <tr>
                    <th>#</th>
                    <th>Username</th>
                    <th>Email</th>
                    <th>Role</th>
                    <th>Actions</th> <!-- New Actions Column -->
                </tr>
                <% users.forEach((u, i)=> { %>
                    <tr id="userRow_<%= u._id %>"> <!-- Add a unique ID for each row -->
                        <td>
                            <%= i + 1 %>
                        </td>
                        <td>
                            <%= u.username %>
                        </td>
                        <td>
                            <%= u.email %>
                        </td>
                        <td>
                            <%= u.role %>
                        </td>
                        <td>
                            <button
                                onclick="updateUser('<%= u._id %>', '<%= u.username %>', '<%= u.email %>', '<%= u.role %>')">Update</button>
                            <button class="ban" onclick="toggleBan('<%= u._id %>', <%= u.banned %>)">
                                <%= u.banned ? 'Unban' : 'Ban' %>
                            </button>
                            <button class="delete" onclick="deleteUser('<%= u._id %>')">Delete</button>
                        </td>
                    </tr>
                    <% }); %>
            </table>
        </div>
        <!-- update modal -->
        <div id="updateModal" class="modal" style="display:none;">
            <div class="modal-content">
                <span class="close" onclick="closeModal()">&times;</span>
                <h2>Update User</h2>
                <form id="updateForm" onsubmit="submitUpdate(); return false;">
                    <input type="hidden" id="updateUserId">
                    <div>
                        <label for="username">Username:</label>
                        <input type="text" id="updateUsername" name="username">
                    </div>
                    <div>
                        <label for="email">Email:</label>
                        <input type="email" id="updateEmail" name="email">
                    </div>
                    <div>
                        <label for="role">Role:</label>
                        <select id="updateRole" name="role">
                            <option value="user">User</option>
                            <option value="admin">Admin</option>
                        </select>
                    </div>
                    <button type="submit">Update</button>
                </form>
            </div>
        </div>


        <%- include('partials/footer') %>


            <script>


                function updateUser(userId, username, email, role) {
                    // Ensure the modal fields exist before trying to set their values
                    const usernameInput = document.getElementById('updateUsername');
                    const emailInput = document.getElementById('updateEmail');
                    const roleSelect = document.getElementById('updateRole');

                    // Check if the inputs are found in the DOM
                    if (usernameInput && emailInput && roleSelect) {
                        document.getElementById('updateUserId').value = userId;
                        usernameInput.value = username;
                        emailInput.value = email;
                        roleSelect.value = role;

                        document.getElementById('updateModal').style.display = 'block';
                    } else {
                        console.error('Modal elements not found.');
                    }
                }

                // Close the modal
                function closeModal() {
                    document.getElementById('updateModal').style.display = 'none';
                }

                // Submit the update request
                async function submitUpdate() {
                    const userId = document.getElementById('updateUserId').value;
                    const username = document.getElementById('updateUsername').value;
                    const email = document.getElementById('updateEmail').value;
                    const role = document.getElementById('updateRole').value;

                    try {
                        const response = await fetch(`api/auth/update/${userId}`, {
                            method: 'PUT',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({ username, email, role })
                        });

                        if (!response.ok) {
                            const errorData = await response.json();
                            throw new Error(errorData.message || 'Error updating user');
                        }

                        alert('User updated successfully');
                        location.reload();  // Reload to reflect changes
                    } catch (error) {
                        console.error('Error updating user:', error);
                        alert(`Failed to update user: ${error.message}`);
                    }
                }

                // Close modal when clicking outside it
                window.onclick = function (event) {
                    const modal = document.getElementById('updateModal');
                    if (event.target === modal) {
                        closeModal();
                    }
                }

                function toggleBan(userId, isBanned) {
                    const action = isBanned ? 'unban' : 'ban'; // Determine the action based on current status
                    const confirmationMessage = isBanned
                        ? 'Are you sure you want to unban this user?'
                        : 'Are you sure you want to ban this user?';

                    if (confirm(confirmationMessage)) {
                        fetch(`/api/auth/${action}/${userId}`, {
                            method: 'PUT', // PUT request to toggle ban/unban
                            headers: {
                                'Content-Type': 'application/json',
                            },
                        })
                            .then(response => {
                                if (!response.ok) {
                                    return response.json().then(errData => { throw new Error(errData.message); });
                                }
                                return response.json(); // Parse the response body as JSON
                            })
                            .then(data => {
                                // After successful action, update the button text and the row color
                                const row = document.querySelector(`#userRow_${userId}`);
                                const banButton = row.querySelector('.ban');
                                if (row) {
                                    if (data.banned) {
                                        row.style.backgroundColor = "#f8d7da"; // Red background for banned
                                        row.style.color = "#721c24"; // Dark red text
                                        banButton.textContent = 'Unban'; // Change text to "Unban"
                                    } else {
                                        row.style.backgroundColor = ""; // Reset to original color
                                        row.style.color = ""; // Reset text color
                                        banButton.textContent = 'Ban'; // Change text back to "Ban"
                                    }
                                }
                            })
                            .catch(error => {
                                console.error('Error:', error);
                                alert(`Error: ${error.message || 'Failed to toggle ban status'}`);
                            });
                    }
                }


                function banUser(userId) {
                    console.log('user id:', userId); // Add a console log to check if the userId is correctly passed

                    if (confirm('Are you sure you want to ban this user?')) {
                        // Send a PUT request to the server with the userId
                        fetch(`/api/auth/ban/${userId}`, {
                            method: 'PUT', // Using PUT as specified
                            headers: {
                                'Content-Type': 'application/json', // Ensure the header specifies JSON
                            },
                        })
                            .then(response => {
                                // Check if the response is not OK (status code other than 200)
                                if (!response.ok) {
                                    return response.json().then(errData => { throw new Error(errData.message); });
                                }
                                return response.json(); // Parse the response body as JSON
                            })
                            .then(data => {
                                // Display the success message from the backend
                                alert(data.message);

                                // After successful ban, update the user's row color and toggle the button
                                const row = document.querySelector(`#userRow_${userId}`);
                                const banButton = row.querySelector('.ban');
                                if (row) {
                                    if (data.banned) {
                                        row.style.backgroundColor = "#f8d7da"; // Red background
                                        row.style.color = "#721c24"; // Dark red text
                                        banButton.textContent = 'Unban'; // Change text to "Unban"
                                    } else {
                                        row.style.backgroundColor = ""; // Reset to original color
                                        row.style.color = ""; // Reset text color
                                        banButton.textContent = 'Ban'; // Change text back to "Ban"
                                    }
                                }
                            })
                            .catch(error => {
                                // Handle any errors
                                console.error('Error:', error);
                                alert(`Error: ${error.message || 'Failed to ban user'}`);
                            });
                    }
                }




                function deleteUser(userId) {
                    if (confirm('Are you sure you want to delete this user?')) {
                        fetch(`/api/auth/delete/${userId}`, {
                            method: 'DELETE',
                            headers: {
                                'Content-Type': 'application/json',
                                'Authorization': 'Bearer YOUR_AUTH_TOKEN'
                            }
                        })
                            .then(response => {
                                if (!response.ok) {
                                    throw new Error('Failed to delete user');
                                }
                                return response.json();
                            })
                            .then(data => {
                                alert(data.message);
                                window.location.reload();
                            })
                            .catch(error => {
                                console.error('Error:', error);
                                alert('Error deleting user');
                            });
                    }
                }
            </script>
</body>

</html>